name: Release
on:
  push:
    tags:
      - "v*"

env:
  GHC_VERSION: "9.0.2"

jobs:
  release:
    name: Release
    runs-on: ubuntu-20.04
    outputs:
      release_upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - id: create_release
        name: Create the release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: ${{ github.ref }}
          draft: true

  publish-unix:
    name: Publish
    needs: release
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-20.04
          - macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out
        uses: actions/checkout@v3
      - name: Set up Haskell
        uses: actions/setup-haskell@v2
        with:
          ghc-version: ${{ env.GHC_VERSION }}
          enable-stack: true
          stack-no-global: true
      - name: Cache ~/.stack
        uses: actions/cache@v3
        with:
          path: ~/.stack
          key: v1-${{ matrix.os }}-stack-${{ hashFiles('stack.yaml', 'package.yaml') }}
      - name: Install dependencies
        run: make smoke.cabal
      - name: Build for release
        run: make out/build/release/smoke
      - id: asset
        name: Set the asset information
        run: |
          export TAG='${{ github.ref }}'
          echo "asset_name=smoke-${TAG##*/}-$(uname -s)-$(uname -m)" >> "$GITHUB_OUTPUT"
          echo "asset_path=out/build/release/smoke" >> "$GITHUB_OUTPUT"
      - name: Upload the asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.release_upload_url }}
          asset_name: ${{ steps.asset.outputs.asset_name }}
          asset_path: ${{ steps.asset.outputs.asset_path }}
          asset_content_type: application/octet-stream

  publish-windows:
    name: Publish (windows-latest)
    needs: release
    runs-on: windows-latest
    steps:
      - name: Check out
        uses: actions/checkout@v3
      - name: Cache chocolatey/bin
        uses: actions/cache@v3
        with:
          path: 'C:\ProgramData\chocolatey\bin'
          key: v1-windows-latest-chocolatey-bin
      - name: Cache chocolatey/lib/haskell-stack
        uses: actions/cache@v3
        with:
          path: 'C:\ProgramData\chocolatey\lib\haskell-stack'
          key: v1-windows-latest-chocolatey-lib-haskell-stack
      - name: Cache ~/AppData/Local/Programs/stack
        uses: actions/cache@v3
        with:
          path: 'C:\Users\runneradmin\AppData\Local\Programs\stack'
          key: v1-windows-latest-programs-stack-${{ hashFiles('stack.yaml') }}
          restore-keys: v1-windows-latest-programs-stack-
      - name: Cache ~/AppData/Roaming/stack
        uses: actions/cache@v3
        with:
          path: 'C:\Users\runneradmin\AppData\Roaming\stack'
          key: v1-windows-latest-appdata-stack-${{ hashFiles('stack.yaml') }}
          restore-keys: v1-windows-latest-appdata-stack-
      - name: Install Stack
        run: "choco install --yes --no-progress haskell-stack"
      - name: Install Haskell
        run: "stack --no-terminal setup"
      - name: Update MSYS2
        run: "stack exec -- pacman --noconfirm -Syuu"
      - name: Install ICU
        run: "stack --no-terminal exec -- pacman --noconfirm -S mingw-w64-x86_64-icu"
      - name: Build for release
        run: 'stack --no-terminal install --local-bin-path=.\out\build\release'
      - id: asset
        name: Set the asset information
        run: |
          $Tag = '${{ github.ref }}' -replace '.+/', ''
          echo "asset_name=smoke-${Tag}-windows-x64.exe" >> "$GITHUB_OUTPUT"
          echo "asset_path=out\build\release\smoke.exe" >> "$GITHUB_OUTPUT"
      - name: Upload the asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.release_upload_url }}
          asset_name: ${{ steps.asset.outputs.asset_name }}
          asset_path: ${{ steps.asset.outputs.asset_path }}
          asset_content_type: application/octet-stream
